// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_q0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [11:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [3:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [10:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;
input  [31:0] out_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg kernel_ce0;
reg bias_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] channel_fu_196_p2;
reg   [4:0] channel_reg_567;
wire    ap_CS_fsm_state2;
wire  signed [9:0] sext_ln55_fu_237_p1;
reg  signed [9:0] sext_ln55_reg_572;
wire   [0:0] icmp_ln49_fu_190_p2;
wire   [8:0] add_ln55_2_fu_241_p2;
reg   [8:0] add_ln55_2_reg_577;
reg   [3:0] bias_addr_reg_582;
wire   [3:0] row_fu_253_p2;
reg   [3:0] row_reg_590;
wire    ap_CS_fsm_state3;
wire   [11:0] add_ln55_4_fu_288_p2;
reg   [11:0] add_ln55_4_reg_595;
wire   [0:0] icmp_ln50_fu_247_p2;
wire   [3:0] col_fu_300_p2;
reg   [3:0] col_reg_603;
wire    ap_CS_fsm_state4;
reg   [10:0] out_addr_reg_608;
wire   [0:0] icmp_ln51_fu_294_p2;
wire   [2:0] k_fu_326_p2;
reg   [2:0] k_reg_616;
wire    ap_CS_fsm_state5;
wire  signed [8:0] sext_ln55_1_fu_366_p1;
reg  signed [8:0] sext_ln55_1_reg_621;
wire   [0:0] icmp_ln52_fu_320_p2;
wire   [63:0] add_ln55_7_fu_391_p2;
reg   [63:0] add_ln55_7_reg_626;
wire   [2:0] i_fu_407_p2;
reg   [2:0] i_reg_634;
wire    ap_CS_fsm_state6;
wire   [11:0] sub_ln55_2_fu_452_p2;
reg   [11:0] sub_ln55_2_reg_639;
wire   [0:0] icmp_ln53_fu_401_p2;
wire   [12:0] add_ln55_10_fu_483_p2;
reg   [12:0] add_ln55_10_reg_644;
wire   [2:0] j_fu_499_p2;
reg   [2:0] j_reg_652;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln55_fu_517_p2;
reg   [0:0] icmp_ln55_reg_657;
wire   [0:0] icmp_ln54_fu_493_p2;
reg   [31:0] in_load_reg_672;
wire    ap_CS_fsm_state8;
reg   [31:0] kernel_load_reg_677;
wire   [31:0] grp_fu_186_p2;
reg   [31:0] tmp_reg_682;
wire    ap_CS_fsm_state12;
wire   [31:0] select_ln55_fu_557_p3;
reg   [31:0] select_ln55_reg_687;
wire   [31:0] grp_fu_182_p2;
reg   [31:0] storemerge_reg_692;
wire    ap_CS_fsm_state17;
reg   [4:0] channel_0_reg_112;
reg   [3:0] row_0_reg_123;
reg   [3:0] col_0_reg_135;
reg   [2:0] k_0_reg_147;
reg   [2:0] i_0_reg_159;
reg   [2:0] j_0_reg_171;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln55_fu_202_p1;
wire   [63:0] zext_ln55_7_fu_315_p1;
wire   [63:0] zext_ln55_13_fu_538_p1;
wire   [63:0] zext_ln55_15_fu_552_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state9;
wire   [7:0] tmp_s_fu_207_p3;
wire   [5:0] tmp_1_fu_219_p3;
wire   [8:0] zext_ln55_1_fu_215_p1;
wire   [8:0] zext_ln55_2_fu_227_p1;
wire   [8:0] sub_ln55_fu_231_p2;
wire   [8:0] zext_ln55_3_fu_259_p1;
wire   [8:0] add_ln55_3_fu_263_p2;
wire   [9:0] tmp_6_fu_276_p3;
wire   [11:0] p_shl4_cast_fu_268_p3;
wire   [11:0] zext_ln55_4_fu_284_p1;
wire   [11:0] zext_ln55_6_fu_306_p1;
wire   [11:0] add_ln55_5_fu_310_p2;
wire   [6:0] tmp_2_fu_336_p3;
wire   [3:0] tmp_3_fu_348_p3;
wire   [7:0] zext_ln55_9_fu_344_p1;
wire   [7:0] zext_ln55_10_fu_356_p1;
wire   [7:0] sub_ln55_1_fu_360_p2;
wire   [9:0] zext_ln55_8_fu_332_p1;
wire  signed [9:0] add_ln55_6_fu_370_p2;
wire   [11:0] tmp_7_fu_379_p3;
wire  signed [63:0] sext_ln55_2_fu_375_p1;
wire  signed [63:0] sext_ln55_3_fu_387_p1;
wire   [3:0] zext_ln53_fu_397_p1;
wire   [3:0] add_ln55_fu_413_p2;
wire   [8:0] zext_ln55_11_fu_419_p1;
wire   [8:0] add_ln55_8_fu_423_p2;
wire   [7:0] trunc_ln55_fu_428_p1;
wire   [9:0] tmp_8_fu_440_p3;
wire   [11:0] p_shl_cast_fu_432_p3;
wire  signed [11:0] sext_ln55_4_fu_448_p1;
wire   [63:0] zext_ln55_5_fu_458_p1;
wire   [63:0] add_ln55_9_fu_462_p2;
wire   [10:0] trunc_ln55_2_fu_471_p1;
wire   [12:0] trunc_ln55_1_fu_467_p1;
wire   [12:0] p_shl9_cast_fu_475_p3;
wire   [2:0] or_ln55_fu_505_p2;
wire   [2:0] or_ln55_1_fu_511_p2;
wire   [3:0] zext_ln54_fu_489_p1;
wire   [3:0] add_ln55_1_fu_523_p2;
wire   [11:0] zext_ln55_12_fu_529_p1;
wire   [11:0] add_ln55_11_fu_533_p2;
wire   [12:0] zext_ln55_14_fu_543_p1;
wire   [12:0] add_ln55_12_fu_547_p2;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

Prediction_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Prediction_fadd_3bkb_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_682),
    .din1(select_ln55_reg_687),
    .ce(1'b1),
    .dout(grp_fu_182_p2)
);

Prediction_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Prediction_fmul_3cud_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_load_reg_672),
    .din1(kernel_load_reg_677),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        channel_0_reg_112 <= channel_reg_567;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        channel_0_reg_112 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln52_fu_320_p2 == 1'd1))) begin
        col_0_reg_135 <= col_reg_603;
    end else if (((icmp_ln50_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        col_0_reg_135 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln54_fu_493_p2 == 1'd1))) begin
        i_0_reg_159 <= i_reg_634;
    end else if (((icmp_ln52_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_159 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_401_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j_0_reg_171 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        j_0_reg_171 <= j_reg_652;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_401_p2 == 1'd1))) begin
        k_0_reg_147 <= k_reg_616;
    end else if (((icmp_ln51_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_reg_147 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln51_fu_294_p2 == 1'd1))) begin
        row_0_reg_123 <= row_reg_590;
    end else if (((icmp_ln49_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        row_0_reg_123 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_401_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln55_10_reg_644 <= add_ln55_10_fu_483_p2;
        sub_ln55_2_reg_639[11 : 1] <= sub_ln55_2_fu_452_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln55_2_reg_577[8 : 1] <= add_ln55_2_fu_241_p2[8 : 1];
        bias_addr_reg_582 <= zext_ln55_fu_202_p1;
        sext_ln55_reg_572[9 : 1] <= sext_ln55_fu_237_p1[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln55_4_reg_595[11 : 1] <= add_ln55_4_fu_288_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln55_7_reg_626 <= add_ln55_7_fu_391_p2;
        sext_ln55_1_reg_621[8 : 1] <= sext_ln55_1_fu_366_p1[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        channel_reg_567 <= channel_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        col_reg_603 <= col_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_634 <= i_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        icmp_ln55_reg_657 <= icmp_ln55_fu_517_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_load_reg_672 <= in_r_q0;
        kernel_load_reg_677 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_652 <= j_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_616 <= k_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_addr_reg_608 <= zext_ln55_7_fu_315_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_reg_590 <= row_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        select_ln55_reg_687 <= select_ln55_fu_557_p3;
        tmp_reg_682 <= grp_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        storemerge_reg_692 <= grp_fu_182_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln49_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state18))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln49_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln50_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln51_fu_294_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln52_fu_320_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln53_fu_401_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln54_fu_493_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_10_fu_483_p2 = (trunc_ln55_1_fu_467_p1 + p_shl9_cast_fu_475_p3);

assign add_ln55_11_fu_533_p2 = (sub_ln55_2_reg_639 + zext_ln55_12_fu_529_p1);

assign add_ln55_12_fu_547_p2 = (add_ln55_10_reg_644 + zext_ln55_14_fu_543_p1);

assign add_ln55_1_fu_523_p2 = (zext_ln54_fu_489_p1 + col_0_reg_135);

assign add_ln55_2_fu_241_p2 = (zext_ln55_2_fu_227_p1 + zext_ln55_1_fu_215_p1);

assign add_ln55_3_fu_263_p2 = (zext_ln55_3_fu_259_p1 + add_ln55_2_reg_577);

assign add_ln55_4_fu_288_p2 = (p_shl4_cast_fu_268_p3 + zext_ln55_4_fu_284_p1);

assign add_ln55_5_fu_310_p2 = (add_ln55_4_reg_595 + zext_ln55_6_fu_306_p1);

assign add_ln55_6_fu_370_p2 = ($signed(sext_ln55_reg_572) + $signed(zext_ln55_8_fu_332_p1));

assign add_ln55_7_fu_391_p2 = ($signed(sext_ln55_2_fu_375_p1) + $signed(sext_ln55_3_fu_387_p1));

assign add_ln55_8_fu_423_p2 = ($signed(sext_ln55_1_reg_621) + $signed(zext_ln55_11_fu_419_p1));

assign add_ln55_9_fu_462_p2 = (add_ln55_7_reg_626 + zext_ln55_5_fu_458_p1);

assign add_ln55_fu_413_p2 = (zext_ln53_fu_397_p1 + row_0_reg_123);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_582;

assign channel_fu_196_p2 = (channel_0_reg_112 + 5'd1);

assign col_fu_300_p2 = (col_0_reg_135 + 4'd1);

assign i_fu_407_p2 = (i_0_reg_159 + 3'd1);

assign icmp_ln49_fu_190_p2 = ((channel_0_reg_112 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_247_p2 = ((row_0_reg_123 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_294_p2 = ((col_0_reg_135 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_320_p2 = ((k_0_reg_147 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_401_p2 = ((i_0_reg_159 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_493_p2 = ((j_0_reg_171 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_517_p2 = ((or_ln55_1_fu_511_p2 == 3'd0) ? 1'b1 : 1'b0);

assign in_r_address0 = zext_ln55_13_fu_538_p1;

assign j_fu_499_p2 = (j_0_reg_171 + 3'd1);

assign k_fu_326_p2 = (k_0_reg_147 + 3'd1);

assign kernel_address0 = zext_ln55_15_fu_552_p1;

assign or_ln55_1_fu_511_p2 = (or_ln55_fu_505_p2 | i_0_reg_159);

assign or_ln55_fu_505_p2 = (k_0_reg_147 | j_0_reg_171);

assign out_r_address0 = out_addr_reg_608;

assign out_r_d0 = storemerge_reg_692;

assign p_shl4_cast_fu_268_p3 = {{add_ln55_3_fu_263_p2}, {3'd0}};

assign p_shl9_cast_fu_475_p3 = {{trunc_ln55_2_fu_471_p1}, {2'd0}};

assign p_shl_cast_fu_432_p3 = {{trunc_ln55_fu_428_p1}, {4'd0}};

assign row_fu_253_p2 = (row_0_reg_123 + 4'd1);

assign select_ln55_fu_557_p3 = ((icmp_ln55_reg_657[0:0] === 1'b1) ? bias_q0 : out_r_q0);

assign sext_ln55_1_fu_366_p1 = $signed(sub_ln55_1_fu_360_p2);

assign sext_ln55_2_fu_375_p1 = add_ln55_6_fu_370_p2;

assign sext_ln55_3_fu_387_p1 = $signed(tmp_7_fu_379_p3);

assign sext_ln55_4_fu_448_p1 = $signed(tmp_8_fu_440_p3);

assign sext_ln55_fu_237_p1 = $signed(sub_ln55_fu_231_p2);

assign sub_ln55_1_fu_360_p2 = (zext_ln55_9_fu_344_p1 - zext_ln55_10_fu_356_p1);

assign sub_ln55_2_fu_452_p2 = ($signed(p_shl_cast_fu_432_p3) - $signed(sext_ln55_4_fu_448_p1));

assign sub_ln55_fu_231_p2 = (zext_ln55_1_fu_215_p1 - zext_ln55_2_fu_227_p1);

assign tmp_1_fu_219_p3 = {{channel_0_reg_112}, {1'd0}};

assign tmp_2_fu_336_p3 = {{k_0_reg_147}, {4'd0}};

assign tmp_3_fu_348_p3 = {{k_0_reg_147}, {1'd0}};

assign tmp_6_fu_276_p3 = {{add_ln55_3_fu_263_p2}, {1'd0}};

assign tmp_7_fu_379_p3 = {{add_ln55_6_fu_370_p2}, {2'd0}};

assign tmp_8_fu_440_p3 = {{add_ln55_8_fu_423_p2}, {1'd0}};

assign tmp_s_fu_207_p3 = {{channel_0_reg_112}, {3'd0}};

assign trunc_ln55_1_fu_467_p1 = add_ln55_9_fu_462_p2[12:0];

assign trunc_ln55_2_fu_471_p1 = add_ln55_9_fu_462_p2[10:0];

assign trunc_ln55_fu_428_p1 = add_ln55_8_fu_423_p2[7:0];

assign zext_ln53_fu_397_p1 = i_0_reg_159;

assign zext_ln54_fu_489_p1 = j_0_reg_171;

assign zext_ln55_10_fu_356_p1 = tmp_3_fu_348_p3;

assign zext_ln55_11_fu_419_p1 = add_ln55_fu_413_p2;

assign zext_ln55_12_fu_529_p1 = add_ln55_1_fu_523_p2;

assign zext_ln55_13_fu_538_p1 = add_ln55_11_fu_533_p2;

assign zext_ln55_14_fu_543_p1 = j_0_reg_171;

assign zext_ln55_15_fu_552_p1 = add_ln55_12_fu_547_p2;

assign zext_ln55_1_fu_215_p1 = tmp_s_fu_207_p3;

assign zext_ln55_2_fu_227_p1 = tmp_1_fu_219_p3;

assign zext_ln55_3_fu_259_p1 = row_0_reg_123;

assign zext_ln55_4_fu_284_p1 = tmp_6_fu_276_p3;

assign zext_ln55_5_fu_458_p1 = i_0_reg_159;

assign zext_ln55_6_fu_306_p1 = col_0_reg_135;

assign zext_ln55_7_fu_315_p1 = add_ln55_5_fu_310_p2;

assign zext_ln55_8_fu_332_p1 = k_0_reg_147;

assign zext_ln55_9_fu_344_p1 = tmp_2_fu_336_p3;

assign zext_ln55_fu_202_p1 = channel_0_reg_112;

always @ (posedge ap_clk) begin
    sext_ln55_reg_572[0] <= 1'b0;
    add_ln55_2_reg_577[0] <= 1'b0;
    add_ln55_4_reg_595[0] <= 1'b0;
    sext_ln55_1_reg_621[0] <= 1'b0;
    sub_ln55_2_reg_639[0] <= 1'b0;
end

endmodule //conv2
