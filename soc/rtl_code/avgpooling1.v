// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module avgpooling1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        in_r_address1,
        in_r_ce1,
        in_r_q1,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [12:0] in_r_address1;
output   in_r_ce1;
input  [31:0] in_r_q1;
output  [10:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] in_r_address0;
reg in_r_ce0;
reg[12:0] in_r_address1;
reg in_r_ce1;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_153;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_144_p2;
reg   [31:0] reg_160;
wire    ap_CS_fsm_state20;
wire   [2:0] n_channel_fu_172_p2;
reg   [2:0] n_channel_reg_481;
wire    ap_CS_fsm_state2;
wire  signed [9:0] sext_ln40_fu_208_p1;
reg  signed [9:0] sext_ln40_reg_486;
wire   [0:0] icmp_ln37_fu_166_p2;
wire  signed [8:0] sext_ln40_1_fu_242_p1;
reg  signed [8:0] sext_ln40_1_reg_492;
wire   [13:0] sub_ln40_2_fu_285_p2;
reg   [13:0] sub_ln40_2_reg_500;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln38_fu_246_p2;
wire   [13:0] sub_ln40_3_fu_330_p2;
reg   [13:0] sub_ln40_3_reg_506;
wire   [11:0] sub_ln40_4_fu_379_p2;
reg   [11:0] sub_ln40_4_reg_512;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln39_fu_385_p2;
wire   [13:0] add_ln40_5_fu_425_p2;
reg   [13:0] add_ln40_5_reg_530;
wire   [13:0] add_ln40_6_fu_430_p2;
reg   [13:0] add_ln40_6_reg_535;
wire   [11:0] add_ln40_7_fu_449_p2;
reg   [11:0] add_ln40_7_reg_540;
wire   [4:0] j_fu_454_p2;
reg   [4:0] j_reg_545;
wire   [4:0] i_fu_460_p2;
reg   [31:0] in_load_4_reg_555;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_148_p2;
reg   [31:0] tmp_4_reg_570;
wire    ap_CS_fsm_state24;
reg   [2:0] n_channel_0_reg_110;
reg   [4:0] i_0_reg_121;
reg   [4:0] j_0_reg_133;
wire    ap_CS_fsm_state25;
wire   [63:0] zext_ln40_8_fu_400_p1;
wire   [63:0] zext_ln40_9_fu_410_p1;
wire   [63:0] zext_ln40_11_fu_466_p1;
wire   [63:0] zext_ln40_12_fu_470_p1;
wire   [63:0] zext_ln40_14_fu_474_p1;
reg   [31:0] grp_fu_144_p0;
reg   [31:0] grp_fu_144_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state21;
wire   [7:0] tmp_11_fu_178_p3;
wire   [4:0] tmp_12_fu_190_p3;
wire   [8:0] zext_ln40_fu_186_p1;
wire   [8:0] zext_ln40_1_fu_198_p1;
wire   [8:0] sub_ln40_fu_202_p2;
wire   [6:0] tmp_13_fu_212_p3;
wire   [3:0] tmp_14_fu_224_p3;
wire   [7:0] zext_ln40_2_fu_220_p1;
wire   [7:0] zext_ln40_3_fu_232_p1;
wire   [7:0] sub_ln40_1_fu_236_p2;
wire   [9:0] zext_ln40_4_fu_252_p1;
wire   [9:0] add_ln40_fu_256_p2;
wire   [8:0] trunc_ln40_fu_261_p1;
wire   [11:0] tmp_15_fu_273_p3;
wire   [13:0] p_shl8_cast_fu_265_p3;
wire  signed [13:0] sext_ln40_2_fu_281_p1;
wire   [4:0] or_ln40_fu_291_p2;
wire   [9:0] zext_ln40_5_fu_297_p1;
wire   [9:0] add_ln40_1_fu_301_p2;
wire   [8:0] trunc_ln40_1_fu_306_p1;
wire   [11:0] tmp_16_fu_318_p3;
wire   [13:0] p_shl6_cast_fu_310_p3;
wire  signed [13:0] sext_ln40_3_fu_326_p1;
wire   [3:0] tmp_17_fu_336_p4;
wire   [8:0] zext_ln40_6_fu_346_p1;
wire   [8:0] add_ln40_2_fu_350_p2;
wire   [7:0] trunc_ln40_2_fu_355_p1;
wire   [9:0] tmp_18_fu_367_p3;
wire   [11:0] p_shl4_cast_fu_359_p3;
wire  signed [11:0] sext_ln40_4_fu_375_p1;
wire   [13:0] zext_ln40_7_fu_391_p1;
wire   [13:0] add_ln40_3_fu_395_p2;
wire   [13:0] add_ln40_4_fu_405_p2;
wire   [4:0] or_ln40_1_fu_415_p2;
wire   [13:0] zext_ln40_10_fu_421_p1;
wire   [3:0] tmp_19_fu_435_p4;
wire   [11:0] zext_ln40_13_fu_445_p1;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
end

Prediction_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Prediction_fadd_3bkb_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_144_p0),
    .din1(grp_fu_144_p1),
    .ce(1'b1),
    .dout(grp_fu_144_p2)
);

Prediction_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Prediction_fmul_3cud_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_160),
    .din1(32'd1048576000),
    .ce(1'b1),
    .dout(grp_fu_148_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_121 <= 5'd0;
    end else if (((icmp_ln39_fu_385_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_121 <= i_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln38_fu_246_p2 == 1'd1))) begin
        j_0_reg_133 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        j_0_reg_133 <= j_reg_545;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        n_channel_0_reg_110 <= n_channel_reg_481;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_channel_0_reg_110 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        reg_153 <= in_r_q1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_153 <= in_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln39_fu_385_p2 == 1'd1))) begin
        add_ln40_5_reg_530[13 : 1] <= add_ln40_5_fu_425_p2[13 : 1];
        add_ln40_6_reg_535[13 : 1] <= add_ln40_6_fu_430_p2[13 : 1];
        add_ln40_7_reg_540 <= add_ln40_7_fu_449_p2;
        j_reg_545 <= j_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_load_4_reg_555 <= in_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_channel_reg_481 <= n_channel_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_160 <= grp_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln40_1_reg_492[8 : 1] <= sext_ln40_1_fu_242_p1[8 : 1];
        sext_ln40_reg_486[9 : 2] <= sext_ln40_fu_208_p1[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln38_fu_246_p2 == 1'd1))) begin
        sub_ln40_2_reg_500[13 : 2] <= sub_ln40_2_fu_285_p2[13 : 2];
        sub_ln40_3_reg_506[13 : 3] <= sub_ln40_3_fu_330_p2[13 : 3];
        sub_ln40_4_reg_512[11 : 1] <= sub_ln40_4_fu_379_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_4_reg_570 <= grp_fu_148_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln37_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_144_p0 = reg_160;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_144_p0 = reg_153;
    end else begin
        grp_fu_144_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_144_p1 = reg_153;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_144_p1 = in_load_4_reg_555;
    end else begin
        grp_fu_144_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        in_r_address0 = zext_ln40_11_fu_466_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_address0 = zext_ln40_8_fu_400_p1;
    end else begin
        in_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        in_r_address1 = zext_ln40_12_fu_470_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_address1 = zext_ln40_9_fu_410_p1;
    end else begin
        in_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4))) begin
        in_r_ce1 = 1'b1;
    end else begin
        in_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln37_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln38_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln39_fu_385_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_1_fu_301_p2 = ($signed(sext_ln40_reg_486) + $signed(zext_ln40_5_fu_297_p1));

assign add_ln40_2_fu_350_p2 = ($signed(sext_ln40_1_reg_492) + $signed(zext_ln40_6_fu_346_p1));

assign add_ln40_3_fu_395_p2 = (sub_ln40_2_reg_500 + zext_ln40_7_fu_391_p1);

assign add_ln40_4_fu_405_p2 = (sub_ln40_3_reg_506 + zext_ln40_7_fu_391_p1);

assign add_ln40_5_fu_425_p2 = (sub_ln40_2_reg_500 + zext_ln40_10_fu_421_p1);

assign add_ln40_6_fu_430_p2 = (sub_ln40_3_reg_506 + zext_ln40_10_fu_421_p1);

assign add_ln40_7_fu_449_p2 = (sub_ln40_4_reg_512 + zext_ln40_13_fu_445_p1);

assign add_ln40_fu_256_p2 = ($signed(sext_ln40_reg_486) + $signed(zext_ln40_4_fu_252_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_fu_460_p2 = (i_0_reg_121 + 5'd2);

assign icmp_ln37_fu_166_p2 = ((n_channel_0_reg_110 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_246_p2 = ((i_0_reg_121 < 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_385_p2 = ((j_0_reg_133 < 5'd28) ? 1'b1 : 1'b0);

assign j_fu_454_p2 = (j_0_reg_133 + 5'd2);

assign n_channel_fu_172_p2 = (n_channel_0_reg_110 + 3'd1);

assign or_ln40_1_fu_415_p2 = (j_0_reg_133 | 5'd1);

assign or_ln40_fu_291_p2 = (i_0_reg_121 | 5'd1);

assign out_r_address0 = zext_ln40_14_fu_474_p1;

assign out_r_d0 = tmp_4_reg_570;

assign p_shl4_cast_fu_359_p3 = {{trunc_ln40_2_fu_355_p1}, {4'd0}};

assign p_shl6_cast_fu_310_p3 = {{trunc_ln40_1_fu_306_p1}, {5'd0}};

assign p_shl8_cast_fu_265_p3 = {{trunc_ln40_fu_261_p1}, {5'd0}};

assign sext_ln40_1_fu_242_p1 = $signed(sub_ln40_1_fu_236_p2);

assign sext_ln40_2_fu_281_p1 = $signed(tmp_15_fu_273_p3);

assign sext_ln40_3_fu_326_p1 = $signed(tmp_16_fu_318_p3);

assign sext_ln40_4_fu_375_p1 = $signed(tmp_18_fu_367_p3);

assign sext_ln40_fu_208_p1 = $signed(sub_ln40_fu_202_p2);

assign sub_ln40_1_fu_236_p2 = (zext_ln40_2_fu_220_p1 - zext_ln40_3_fu_232_p1);

assign sub_ln40_2_fu_285_p2 = ($signed(p_shl8_cast_fu_265_p3) - $signed(sext_ln40_2_fu_281_p1));

assign sub_ln40_3_fu_330_p2 = ($signed(p_shl6_cast_fu_310_p3) - $signed(sext_ln40_3_fu_326_p1));

assign sub_ln40_4_fu_379_p2 = ($signed(p_shl4_cast_fu_359_p3) - $signed(sext_ln40_4_fu_375_p1));

assign sub_ln40_fu_202_p2 = (zext_ln40_fu_186_p1 - zext_ln40_1_fu_198_p1);

assign tmp_11_fu_178_p3 = {{n_channel_0_reg_110}, {5'd0}};

assign tmp_12_fu_190_p3 = {{n_channel_0_reg_110}, {2'd0}};

assign tmp_13_fu_212_p3 = {{n_channel_0_reg_110}, {4'd0}};

assign tmp_14_fu_224_p3 = {{n_channel_0_reg_110}, {1'd0}};

assign tmp_15_fu_273_p3 = {{add_ln40_fu_256_p2}, {2'd0}};

assign tmp_16_fu_318_p3 = {{add_ln40_1_fu_301_p2}, {2'd0}};

assign tmp_17_fu_336_p4 = {{i_0_reg_121[4:1]}};

assign tmp_18_fu_367_p3 = {{add_ln40_2_fu_350_p2}, {1'd0}};

assign tmp_19_fu_435_p4 = {{j_0_reg_133[4:1]}};

assign trunc_ln40_1_fu_306_p1 = add_ln40_1_fu_301_p2[8:0];

assign trunc_ln40_2_fu_355_p1 = add_ln40_2_fu_350_p2[7:0];

assign trunc_ln40_fu_261_p1 = add_ln40_fu_256_p2[8:0];

assign zext_ln40_10_fu_421_p1 = or_ln40_1_fu_415_p2;

assign zext_ln40_11_fu_466_p1 = add_ln40_5_reg_530;

assign zext_ln40_12_fu_470_p1 = add_ln40_6_reg_535;

assign zext_ln40_13_fu_445_p1 = tmp_19_fu_435_p4;

assign zext_ln40_14_fu_474_p1 = add_ln40_7_reg_540;

assign zext_ln40_1_fu_198_p1 = tmp_12_fu_190_p3;

assign zext_ln40_2_fu_220_p1 = tmp_13_fu_212_p3;

assign zext_ln40_3_fu_232_p1 = tmp_14_fu_224_p3;

assign zext_ln40_4_fu_252_p1 = i_0_reg_121;

assign zext_ln40_5_fu_297_p1 = or_ln40_fu_291_p2;

assign zext_ln40_6_fu_346_p1 = tmp_17_fu_336_p4;

assign zext_ln40_7_fu_391_p1 = j_0_reg_133;

assign zext_ln40_8_fu_400_p1 = add_ln40_3_fu_395_p2;

assign zext_ln40_9_fu_410_p1 = add_ln40_4_fu_405_p2;

assign zext_ln40_fu_186_p1 = tmp_11_fu_178_p3;

always @ (posedge ap_clk) begin
    sext_ln40_reg_486[1:0] <= 2'b00;
    sext_ln40_1_reg_492[0] <= 1'b0;
    sub_ln40_2_reg_500[1:0] <= 2'b00;
    sub_ln40_3_reg_506[2:0] <= 3'b100;
    sub_ln40_4_reg_512[0] <= 1'b0;
    add_ln40_5_reg_530[0] <= 1'b1;
    add_ln40_6_reg_535[0] <= 1'b1;
end

endmodule //avgpooling1
