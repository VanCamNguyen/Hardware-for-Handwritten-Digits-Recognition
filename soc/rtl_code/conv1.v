// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [2:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [2:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [12:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg kernel_ce0;
reg bias_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] channel_fu_140_p2;
reg   [2:0] channel_reg_309;
wire    ap_CS_fsm_state2;
reg   [2:0] kernel_addr_reg_314;
wire   [0:0] icmp_ln10_fu_134_p2;
wire  signed [9:0] sext_ln15_fu_182_p1;
reg  signed [9:0] sext_ln15_reg_319;
reg   [2:0] bias_addr_reg_324;
wire   [4:0] row_fu_192_p2;
reg   [4:0] row_reg_332;
wire    ap_CS_fsm_state3;
wire   [10:0] sub_ln15_1_fu_226_p2;
reg   [10:0] sub_ln15_1_reg_337;
wire   [0:0] icmp_ln11_fu_186_p2;
wire   [13:0] sub_ln15_2_fu_261_p2;
reg   [13:0] sub_ln15_2_reg_342;
wire   [4:0] col_fu_273_p2;
reg   [4:0] col_reg_350;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln12_fu_267_p2;
wire   [13:0] add_ln15_2_fu_297_p2;
reg   [13:0] add_ln15_2_reg_360;
reg   [31:0] in_load_reg_365;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_129_p2;
reg   [31:0] tmp_reg_375;
wire    ap_CS_fsm_state9;
reg   [31:0] bias_load_reg_380;
wire   [31:0] grp_fu_125_p2;
reg   [31:0] tmp_s_reg_385;
wire    ap_CS_fsm_state14;
reg   [2:0] channel_0_reg_92;
reg   [4:0] row_0_reg_103;
reg   [4:0] col_0_reg_114;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln15_fu_146_p1;
wire  signed [63:0] sext_ln15_2_fu_292_p1;
wire   [63:0] zext_ln15_8_fu_302_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire   [7:0] tmp_4_fu_152_p3;
wire   [4:0] tmp_5_fu_164_p3;
wire   [8:0] zext_ln15_1_fu_160_p1;
wire   [8:0] zext_ln15_2_fu_172_p1;
wire   [8:0] sub_ln15_fu_176_p2;
wire   [9:0] tmp_6_fu_202_p3;
wire   [6:0] tmp_7_fu_214_p3;
wire   [10:0] zext_ln15_4_fu_210_p1;
wire   [10:0] zext_ln15_5_fu_222_p1;
wire   [9:0] zext_ln15_3_fu_198_p1;
wire   [9:0] add_ln15_fu_232_p2;
wire   [8:0] trunc_ln15_fu_237_p1;
wire   [11:0] tmp_9_fu_249_p3;
wire   [13:0] p_shl2_cast_fu_241_p3;
wire  signed [13:0] sext_ln15_1_fu_257_p1;
wire   [10:0] zext_ln15_7_fu_283_p1;
wire   [10:0] add_ln15_1_fu_287_p2;
wire   [13:0] zext_ln15_6_fu_279_p1;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

Prediction_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Prediction_fadd_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_375),
    .din1(bias_load_reg_380),
    .ce(1'b1),
    .dout(grp_fu_125_p2)
);

Prediction_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Prediction_fmul_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_load_reg_365),
    .din1(kernel_q0),
    .ce(1'b1),
    .dout(grp_fu_129_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        channel_0_reg_92 <= channel_reg_309;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        channel_0_reg_92 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        col_0_reg_114 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        col_0_reg_114 <= col_reg_350;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln12_fu_267_p2 == 1'd1))) begin
        row_0_reg_103 <= row_reg_332;
    end else if (((icmp_ln10_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        row_0_reg_103 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln15_2_reg_360 <= add_ln15_2_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bias_addr_reg_324 <= zext_ln15_fu_146_p1;
        kernel_addr_reg_314 <= zext_ln15_fu_146_p1;
        sext_ln15_reg_319[9 : 2] <= sext_ln15_fu_182_p1[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bias_load_reg_380 <= bias_q0;
        tmp_reg_375 <= grp_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        channel_reg_309 <= channel_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        col_reg_350 <= col_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_load_reg_365 <= in_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_reg_332 <= row_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln15_1_reg_337[10 : 2] <= sub_ln15_1_fu_226_p2[10 : 2];
        sub_ln15_2_reg_342[13 : 2] <= sub_ln15_2_fu_261_p2[13 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_s_reg_385 <= grp_fu_125_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln10_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln11_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln12_fu_267_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_1_fu_287_p2 = (sub_ln15_1_reg_337 + zext_ln15_7_fu_283_p1);

assign add_ln15_2_fu_297_p2 = (sub_ln15_2_reg_342 + zext_ln15_6_fu_279_p1);

assign add_ln15_fu_232_p2 = ($signed(sext_ln15_reg_319) + $signed(zext_ln15_3_fu_198_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_324;

assign channel_fu_140_p2 = (channel_0_reg_92 + 3'd1);

assign col_fu_273_p2 = (col_0_reg_114 + 5'd1);

assign icmp_ln10_fu_134_p2 = ((channel_0_reg_92 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_186_p2 = ((row_0_reg_103 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_267_p2 = ((col_0_reg_114 == 5'd28) ? 1'b1 : 1'b0);

assign in_r_address0 = sext_ln15_2_fu_292_p1;

assign kernel_address0 = kernel_addr_reg_314;

assign out_r_address0 = zext_ln15_8_fu_302_p1;

assign out_r_d0 = tmp_s_reg_385;

assign p_shl2_cast_fu_241_p3 = {{trunc_ln15_fu_237_p1}, {5'd0}};

assign row_fu_192_p2 = (row_0_reg_103 + 5'd1);

assign sext_ln15_1_fu_257_p1 = $signed(tmp_9_fu_249_p3);

assign sext_ln15_2_fu_292_p1 = $signed(add_ln15_1_fu_287_p2);

assign sext_ln15_fu_182_p1 = $signed(sub_ln15_fu_176_p2);

assign sub_ln15_1_fu_226_p2 = (zext_ln15_4_fu_210_p1 - zext_ln15_5_fu_222_p1);

assign sub_ln15_2_fu_261_p2 = ($signed(p_shl2_cast_fu_241_p3) - $signed(sext_ln15_1_fu_257_p1));

assign sub_ln15_fu_176_p2 = (zext_ln15_1_fu_160_p1 - zext_ln15_2_fu_172_p1);

assign tmp_4_fu_152_p3 = {{channel_0_reg_92}, {5'd0}};

assign tmp_5_fu_164_p3 = {{channel_0_reg_92}, {2'd0}};

assign tmp_6_fu_202_p3 = {{row_0_reg_103}, {5'd0}};

assign tmp_7_fu_214_p3 = {{row_0_reg_103}, {2'd0}};

assign tmp_9_fu_249_p3 = {{add_ln15_fu_232_p2}, {2'd0}};

assign trunc_ln15_fu_237_p1 = add_ln15_fu_232_p2[8:0];

assign zext_ln15_1_fu_160_p1 = tmp_4_fu_152_p3;

assign zext_ln15_2_fu_172_p1 = tmp_5_fu_164_p3;

assign zext_ln15_3_fu_198_p1 = row_0_reg_103;

assign zext_ln15_4_fu_210_p1 = tmp_6_fu_202_p3;

assign zext_ln15_5_fu_222_p1 = tmp_7_fu_214_p3;

assign zext_ln15_6_fu_279_p1 = col_0_reg_114;

assign zext_ln15_7_fu_283_p1 = col_0_reg_114;

assign zext_ln15_8_fu_302_p1 = add_ln15_2_reg_360;

assign zext_ln15_fu_146_p1 = channel_0_reg_92;

always @ (posedge ap_clk) begin
    sext_ln15_reg_319[1:0] <= 2'b00;
    sub_ln15_1_reg_337[1:0] <= 2'b00;
    sub_ln15_2_reg_342[1:0] <= 2'b00;
end

endmodule //conv1
