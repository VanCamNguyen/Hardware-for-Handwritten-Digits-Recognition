// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [10:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] k_fu_119_p2;
reg   [4:0] k_reg_279;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln70_fu_149_p2;
reg   [8:0] add_ln70_reg_284;
wire   [0:0] icmp_ln67_fu_113_p2;
wire   [3:0] i_fu_161_p2;
reg   [3:0] i_reg_292;
wire    ap_CS_fsm_state3;
wire   [11:0] add_ln70_2_fu_196_p2;
reg   [11:0] add_ln70_2_reg_297;
wire   [0:0] icmp_ln68_fu_155_p2;
wire   [3:0] j_fu_208_p2;
reg   [3:0] j_reg_305;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln70_5_fu_223_p1;
reg   [63:0] zext_ln70_5_reg_310;
wire   [0:0] icmp_ln69_fu_202_p2;
reg   [31:0] in_load_reg_320;
wire    ap_CS_fsm_state5;
wire   [31:0] select_ln70_fu_269_p3;
reg   [31:0] select_ln70_reg_327;
wire    ap_CS_fsm_state6;
reg   [4:0] k_0_reg_74;
reg   [3:0] i_0_reg_85;
reg   [3:0] j_0_reg_96;
wire    ap_CS_fsm_state7;
wire   [7:0] tmp_2_fu_125_p3;
wire   [5:0] tmp_3_fu_137_p3;
wire   [8:0] zext_ln70_1_fu_145_p1;
wire   [8:0] zext_ln70_fu_133_p1;
wire   [8:0] zext_ln70_2_fu_167_p1;
wire   [8:0] add_ln70_1_fu_171_p2;
wire   [9:0] tmp_4_fu_184_p3;
wire   [11:0] p_shl2_cast_fu_176_p3;
wire   [11:0] zext_ln70_3_fu_192_p1;
wire   [11:0] zext_ln70_4_fu_214_p1;
wire   [11:0] add_ln70_3_fu_218_p2;
wire   [31:0] bitcast_ln70_fu_228_p1;
wire   [7:0] tmp_fu_231_p4;
wire   [22:0] trunc_ln70_fu_241_p1;
wire   [0:0] icmp_ln70_1_fu_251_p2;
wire   [0:0] icmp_ln70_fu_245_p2;
wire   [0:0] or_ln70_fu_257_p2;
wire   [0:0] grp_fu_107_p2;
wire   [0:0] and_ln70_fu_263_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

Prediction_fcmp_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Prediction_fcmp_3dEe_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_r_q0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_107_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_85 <= i_reg_292;
    end else if (((icmp_ln67_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_85 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_96 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_reg_96 <= j_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_74 <= k_reg_279;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_0_reg_74 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln70_2_reg_297[11 : 1] <= add_ln70_2_fu_196_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln70_reg_284[8 : 1] <= add_ln70_fu_149_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_292 <= i_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_load_reg_320 <= in_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_305 <= j_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_279 <= k_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        select_ln70_reg_327 <= select_ln70_fu_269_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln70_5_reg_310[11 : 0] <= zext_ln70_5_fu_223_p1[11 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln67_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln67_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln67_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln68_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln69_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln70_1_fu_171_p2 = (zext_ln70_2_fu_167_p1 + add_ln70_reg_284);

assign add_ln70_2_fu_196_p2 = (p_shl2_cast_fu_176_p3 + zext_ln70_3_fu_192_p1);

assign add_ln70_3_fu_218_p2 = (add_ln70_2_reg_297 + zext_ln70_4_fu_214_p1);

assign add_ln70_fu_149_p2 = (zext_ln70_1_fu_145_p1 + zext_ln70_fu_133_p1);

assign and_ln70_fu_263_p2 = (or_ln70_fu_257_p2 & grp_fu_107_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln70_fu_228_p1 = in_load_reg_320;

assign i_fu_161_p2 = (i_0_reg_85 + 4'd1);

assign icmp_ln67_fu_113_p2 = ((k_0_reg_74 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_155_p2 = ((i_0_reg_85 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_202_p2 = ((j_0_reg_96 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln70_1_fu_251_p2 = ((trunc_ln70_fu_241_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_245_p2 = ((tmp_fu_231_p4 != 8'd255) ? 1'b1 : 1'b0);

assign in_r_address0 = zext_ln70_5_fu_223_p1;

assign j_fu_208_p2 = (j_0_reg_96 + 4'd1);

assign k_fu_119_p2 = (k_0_reg_74 + 5'd1);

assign or_ln70_fu_257_p2 = (icmp_ln70_fu_245_p2 | icmp_ln70_1_fu_251_p2);

assign out_r_address0 = zext_ln70_5_reg_310;

assign out_r_d0 = select_ln70_reg_327;

assign p_shl2_cast_fu_176_p3 = {{add_ln70_1_fu_171_p2}, {3'd0}};

assign select_ln70_fu_269_p3 = ((and_ln70_fu_263_p2[0:0] === 1'b1) ? 32'd0 : in_load_reg_320);

assign tmp_2_fu_125_p3 = {{k_0_reg_74}, {3'd0}};

assign tmp_3_fu_137_p3 = {{k_0_reg_74}, {1'd0}};

assign tmp_4_fu_184_p3 = {{add_ln70_1_fu_171_p2}, {1'd0}};

assign tmp_fu_231_p4 = {{bitcast_ln70_fu_228_p1[30:23]}};

assign trunc_ln70_fu_241_p1 = bitcast_ln70_fu_228_p1[22:0];

assign zext_ln70_1_fu_145_p1 = tmp_3_fu_137_p3;

assign zext_ln70_2_fu_167_p1 = i_0_reg_85;

assign zext_ln70_3_fu_192_p1 = tmp_4_fu_184_p3;

assign zext_ln70_4_fu_214_p1 = j_0_reg_96;

assign zext_ln70_5_fu_223_p1 = add_ln70_3_fu_218_p2;

assign zext_ln70_fu_133_p1 = tmp_2_fu_125_p3;

always @ (posedge ap_clk) begin
    add_ln70_reg_284[0] <= 1'b0;
    add_ln70_2_reg_297[0] <= 1'b0;
    zext_ln70_5_reg_310[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //relu2
